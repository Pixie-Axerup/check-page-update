on:
  [push]
  #schedule:
    # Run every hour, on the hour. This can be customized to checking as frequently as every 5 minutes.
   # - cron:  '1 8 * * *'

name: Check for changes

env:
  SEGMENT_DOWNLOAD_TIMEOUT_MIN: "1800"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:

      # Use cURL to fetch the given URL, saving the response to `data.json`
      - name: Fetch data
        id: fetch_data
        run: |
          curl "https://api.github.com/repos/open-telemetry/opentelemetry-specification/releases/latest" -o data.json

        shell: bash

      # Use `jq` to pull one or more fields from the JSON to include in the issue
      - name: Parse data
        id: parse_data
        run: |
          echo "::set-output name=version::"$(cat data.json | jq .name)
          echo "::set-output name=published_at::"$(cat data.json | jq .published_at)
          echo "::set-output name=draft::"$(cat data.json | jq .draft)
          echo "::set-output name=prerelease::"$(cat data.json | jq .prerelease)
          echo "::set-output name=target_commitish::"$(cat data.json | jq .target_commitish)

      # Compare the response to the previous run, using a hash of the response as the cache key
      - name: Fetch Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: data.json
          key: ${{ hashFiles('data.json') }}
      
      # If there was not a cache hit (meaning the response changed), print it, and create an issue.

      - name: Notify if page has changed and create issue
        #if: steps.cache.outputs.cache-hit != 'true' && steps.parse_data.outputs.draft == 'False' && steps.parse_data.outputs.prerelease == 'False' && steps.parse_data.outputs.target_commitish == 'main'
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ github.token }}
          title: OpenTelemetry Specifications updated on ${{ steps.parse_data.outputs.published_at }}
          body: |
              ## OpenTelemetry Specifications was updated

                  ${{ steps.parse_data.outputs.version }} was published at ${{ steps.parse_data.outputs.published_at }}

                  Check out https://github.com/open-telemetry/opentelemetry-specification/blob/main/CHANGELOG.md

